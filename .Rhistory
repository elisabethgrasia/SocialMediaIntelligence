plot(E(lcgraphed)$weight, nodes)
for (i in seq(nrow(en))){
node1 = en[i, 1]
node2 = en[i, 2]
nover = ne.over(no1 = node1, no2 = node2, graphed = lcgraphed)
nodes[i] = nover
}
plot(E(lcgraphed)$weight, nodes)
print(nodes)
length(print(nodes))
print(length(nodes))
print(length(E(lcgraphed)$weight))
E(lcgraphed)
E(lcgraphed)$weight
?E
print(nodes)
print(nodes[2])
?ends
E(lcgraphed)
plot(E(lcgraphed))
neighborhood(lcgraphed)
?neighborhood
?neighbor
?neighbors
ne.over = function(no1, no2, graphed) {
i = intersection(neighbors(graphed, no1), neighbors(graphed, no2))
u = union(neighbors(graphed, no1), neighbors(graphed, no2))
a = length(i)/ (length(u))
return(a)
}
nodes = list()
for (i in seq(nrow(en))){
node1 = en[i, 1]
node2 = en[i, 2]
nover = ne.over(no1 = node1, no2 = node2, graphed = lcgraphed)
nodes[i] = nover
}
print(nodes[2])
neighbors(lcgraphed, nrow(en)[1])
nrow(en)
seq(nrow(en))
# neighourhood overlap between each pair of connected nodes in the twitter graph
en = ends(lcgraphed, E(lcgraphed))
seq(nrow(en))
en
typeof(en)
g = read.graph(file="telephoneCalls.net", format="pajek")
# run the following lines if you want to see how it looks like
V(g)$label.cex = 0.5
plot(g, layout=layout.fruchterman.reingold, vertex.size=10)
print(g)
# neighourhood overlap between each pair of connected nodes in the twitter graph
print(lcgraphed)
### Step 1. find end nodes of all the edges
g_ends= ends(g, E(g)) ## ends = incident vertices of some graph edges; E means parsing the graphs into all the g
### Step2. Create a function to calculate neighborhood overlap
no = function(node1, node2, g_) {
cmn = intersection(neighbors(g_, node1), neighbors(g_, node2))
uni = union(neighbors(g_, node1), neighbors(g_, node2))
ans = length(cmn)/ (length(uni)-2) # here we are removing 2 nodes those are our node1 & node 2
return(ans)
}
### Step 3. Calculate the Neighbourhood Overlap
#### Create a list to store the Neighbourhood Overlap
no_list = list()
for (i in seq(nrow(g_ends))){
# a for loop that will go through the list of end nodes
# extract node 1 and 2 from the list of "pair of end nodes"
n1 = g_ends[i, 1]
n2 = g_ends[i, 2]
# calculate neighborhood overlap for all pairs
no_calc = no(node1 = n1, node2 = n2, g)
# add neighborhood overlap to the list
no_list[i] = no_calc
}
### Step 4. Plot edge strength against Neighborhood Overlap
plot(E(g)$weight, no_list)
E(g)
E(g)$
# Edge betweenness
## Plot the relationship about how edge strength is related to edge betweennness.
### Step 1. Get edge betweenness for all edges of graph 'g'
e_bet = edge_betweenness(g, E(g))
E(g)$weight
print(max(nodes))
nodes
for i in nodes{
for b in seq(nodes) {
for (b in seq(nodes)) {
for (a in seq(i)) {
print(max(a))}}
# neighourhood overlap between each pair of connected nodes in the twitter graph
en = ends(lcgraphed, E(lcgraphed))
ne.over = function(no1, no2, graphed) {
i = intersection(neighbors(graphed, no1), neighbors(graphed, no2))
u = union(neighbors(graphed, no1), neighbors(graphed, no2))
a = length(i)/ (length(u))
return(a)
}
nodes = list()
for (i in seq(nrow(en))){
node1 = en[i, 1]
node2 = en[i, 2]
nover = ne.over(no1 = node1, no2 = node2, graphed = lcgraphed)
nodes[i] = nover
}
print(nodes)
print(u)
ne.over = function(no1, no2, graphed) {
i = intersection(neighbors(graphed, no1), neighbors(graphed, no2))
u = union(neighbors(graphed, no1), neighbors(graphed, no2))
a = length(i)/ (length(u))
return(a)
print(i)
print(u)
}
ne.over(en[i, 1], en[i, 2], lcgraphed)
en[i, 1]
en[i, 2]
g_ends[i, 1]
g_ends[i, 1]
ne.over(g_ends[i, 1], g_ends[i, 2], g)
## largest component graph
lcgraph = cluster_edge_betweenness(lce, directed = FALSE)
lcgraph
lc
deco
subgraph
?subgraph
print(lcgraphed)
print(E(lcgraphed))
dev.off()
V(lcgraphed)
E(lcgraphed)
lcgraphed
# neighourhood overlap between each pair of connected nodes in the twitter graph
en = ends(lcgraphed, E(lcgraphed))
en[1]
g_ends[1]
typeof(g_ends[1])
V(g)
E(g)
length(lcgraphed)
# neighourhood overlap between each pair of connected nodes in the twitter graph
ay = set.vertex.attribute(lcgraphed, "name", value = paste("A",1:10, sep = ""))
lcgraphed
length(V(lcgraphed)
length(V(lcgraphed))
length(V(lcgraphed))
# neighourhood overlap between each pair of connected nodes in the twitter graph
ay = set.vertex.attribute(lcgraphed, "name", value = paste("A",1:146, sep = ""))
ay
# neighourhood overlap between each pair of connected nodes in the twitter graph
g = set.vertex.attribute(lcgraphed, "name", value = paste("A",1:146, sep = ""))
g
E(g)
V(g)
en = ends(g, E(g))
en[1]
en = ends(g, E(g))[,1]
en[1]
en = ends(g, E(g), names = FALSE)
en[1]
j <=- make_ring(5)
j <- make_ring(5)
end(j, E(j))
j <- make_ring(10)
end(j, E(j))
# neighourhood overlap between each pair of connected nodes in the twitter graph
bb = set.vertex.attribute(lcgraphed, "name", value = paste("A",1:146, sep = ""))
en = ends(bb, E(bb), names = FALSE)
typeof(en)
print(i)
ne.over = function(no1, no2, graphed) {
i = intersection(neighbors(graphed, no1), neighbors(graphed, no2))
u = union(neighbors(graphed, no1), neighbors(graphed, no2))
a = length(i)/ (length(u))
return(a)
print(i)
print(u)
}
ne.over(en[1, 1], en[1, 2], bb)
nodes = list()
for (i in seq(nrow(en))){
node1 = en[i, 1]
node2 = en[i, 2]
nover = ne.over(no1 = node1, no2 = node2, graphed = bb)
nodes[i] = nover
}
print(nodes)
nrow(en)
g = read.graph(file="telephoneCalls.net", format="pajek")
### Step 1. find end nodes of all the edges
g_ends= ends(g, E(g)) ## ends = incident vertices of some graph edges; E means parsing the graphs into all the g
### Step2. Create a function to calculate neighborhood overlap
no = function(node1, node2, g_) {
cmn = intersection(neighbors(g_, node1), neighbors(g_, node2))
uni = union(neighbors(g_, node1), neighbors(g_, node2))
ans = length(cmn)/ (length(uni)-2) # here we are removing 2 nodes those are our node1 & node 2
return(ans)
}
### Step 3. Calculate the Neighbourhood Overlap
#### Create a list to store the Neighbourhood Overlap
no_list = list()
for (i in seq(nrow(g_ends))){
# a for loop that will go through the list of end nodes
# extract node 1 and 2 from the list of "pair of end nodes"
n1 = g_ends[i, 1]
n2 = g_ends[i, 2]
# calculate neighborhood overlap for all pairs
no_calc = no(node1 = n1, node2 = n2, g)
# add neighborhood overlap to the list
no_list[i] = no_calc
}
print(no_list)
E(bb)$weight
# identify the pair with the greatest and least neighborhood overlap
which.max(nodes)
# identify the pair with the greatest and least neighborhood overlap
max(nodes)
# identify the pair with the greatest and least neighborhood overlap
nodes[1]
# identify the pair with the greatest and least neighborhood overlap
nodes[[1]]
# identify the pair with the greatest and least neighborhood overlap
nodes[[[1]]
# identify the pair with the greatest and least neighborhood overlap
nodes[[[1]]]
# identify the pair with the greatest and least neighborhood overlap
nodes[[1]]
# identify the pair with the greatest and least neighborhood overlap
max(nodes[[1]])
# identify the pair with the greatest and least neighborhood overlap
max(nodes[[]])
print(max(i))
# identify the pair with the greatest and least neighborhood overlap
for (i in nodes[]){
print(max(i))
}
# identify the pair with the greatest and least neighborhood overlap
rr = list()
for (n in nodes){
rr[i] = append(n)
return(rr)
}
rr[i] = n
# identify the pair with the greatest and least neighborhood overlap
rr = list()
for (n in nodes){
rr[i] = n
return(rr)
}
rr
rr[i] = rr+n
# identify the pair with the greatest and least neighborhood overlap
rr = list()
for (n in nodes){
rr[i] = rr+n
return(rr)
}
?append
# identify the pair with the greatest and least neighborhood overlap
rr = list()
for (n in nodes){
rr = append(n)
return(rr)
}
# identify the pair with the greatest and least neighborhood overlap
#greatest neighborhood
nodes[which(unlist(lapply(nodes,function(x) as.numeric(x[2])))==max(unlist(lapply(nodes,function(x) as.numeric(x[2])))))]
print(head(nodes))
nodes[which(unlist(lapply(nodes, function(x)as.numerix(x[2]))))]
nodes[which(unlist(lapply(nodes, function(x)as.numeric(x[2]))))]
nodes[unlist(lapply(nodes, function(x)as.numeric(x[2])))]
# identify the pair with the greatest and least neighborhood overlap
#greatest neighborhood
nodes[[1]][1]
# identify the pair with the greatest and least neighborhood overlap
#greatest neighborhood
for (i in nodes){
print(max(nodes[[i]][i]))
}
# identify the pair with the greatest and least neighborhood overlap
#greatest neighborhood
rr = list()
for (i in nodes){
rr[i] = nodes[[i]][i]
print(max(rr))
}
for (i in nodes){
rr[i] = nodes[[i]][i]
return(max(rr))
}
return(rr)
for (i in nodes){
rr[i] = nodes[[i]][i]
return(rr)
}
print(rr)
# identify the pair with the greatest and least neighborhood overlap
#greatest neighborhood
rr = list()
for (i in seq(nodes)){
rr[i] = nodes[[i]][i]
return(rr)
}
print(rr)
for (i in seq(length(nodes))){
rr[i] = nodes[[i]][i]
return(rr)
}
print(rr)
# identify the pair with the greatest and least neighborhood overlap
nodes[[1]][1]
# identify the pair with the greatest and least neighborhood overlap
rr = list()
for (index in 1:length(nodes)){
rr = c(rr, nodes[[index]])
}
print(rr)
# identify the pair with the greatest and least neighborhood overlap
rr = list()
for (index in 1:length(nodes)){
rr = append(nodes[[index]][index])
}
# identify the pair with the greatest and least neighborhood overlap
rr = list()
for (index in 1:length(nodes)){
rr = append(rr, nodes[[index]][index])
}
print(rr)
# identify the pair with the greatest and least neighborhood overlap
nodes = c()
for (elem in nodes){
nodes = c(nodes, elem)
}
print(nodes)
# identify the pair with the greatest and least neighborhood overlap
nodes = c()
for (index in 1:length(nodes)){
nodes = c(nodes, sum(nodes[[index]]))
}
# identify the pair with the greatest and least neighborhood overlap
nodes = c()
for (index in 1:length(nodes)){
nodes = c(nodes, sum(nodes[[index]][index]))
}
for (i in 1:length(nodes)){
rr = c(rr, nodes[[i]])
for (j in 1:length(rr)){
print(max(j))
}
}
# identify the pair with the greatest and least neighborhood overlap
rr = c()
for (i in 1:length(nodes)){
rr = c(rr, nodes[[i]])
for (j in 1:length(rr)){
print(max(j))
}
}
print(j
}
# identify the pair with the greatest and least neighborhood overlap
rr = c()
for (i in 1:length(nodes)){
rr = c(rr, nodes[[i]])
for (j in 1:length(rr)){
print(j)
}
}
#for (j in 1:length(rr)){
print(rr)
for (i in 1:length(nodes)){
rr = c(rr, nodes[[i]])
#for (j in 1:length(rr)){
print(rr)
}
for (i in 1:length(nodes)){
rr = c(rr, nodes[i])
#for (j in 1:length(rr)){
print(rr)
}
#for (j in 1:length(rr)){
#print(rr)
}
print(nodes[i])
for (i in 1:length(nodes)){
print(nodes[i])
#for (j in 1:length(rr)){
#print(rr)
}
for (i in nodes){
print(nodes[i])
#for (j in 1:length(rr)){
#print(rr)
}
#}
nodes()
#}
nodes'
#}
nodes
# identify the pair with the greatest and least neighborhood overlap
rr = c()
for (i in nodes){
print(nodes[i])
#for (j in 1:length(rr)){
#print(rr)
}
>>
>>
.
>
>
>
.
.
.a?>>>
>
>
>
akshd
g
graph()
print(nodes)
>>
.
>>>
>
nodes = list()
for (i in seq(nrow(en))){
node1 = en[i, 1]
node2 = en[i, 2]
nover = ne.over(no1 = node1, no2 = node2, graphed = bb)
nodes[i] = nover
}
print(head(nodes))
knitr::opts_chunk$set(echo = TRUE)
# neighourhood overlap between each pair of connected nodes in the twitter graph
# changing the name of the vertex to easier analysis process
bb = set.vertex.attribute(lcgraphed, "name", value = paste("A",1:146))
,
# neighourhood overlap between each pair of connected nodes in the twitter graph
# changing the name of the vertex to easier analysis process
bb = set.vertex.attribute(lcgraphed, "name", value = paste("A",1:146, sep = ""))
library('igraph')
library('rtweet')
library('tm')
library('dplyr')
bb = set.vertex.attribute(lcgraphed, "name", value = paste("A",1:146, sep = ""))
M = get.adjacency(bb)
typeof(M)
typeof(M)
M = as_adjacency_matrix(bb)
typeof(M)
M = as_adjacency_matrix(bb)
typeof(M)
M = as.matrix(M)
typeof(M)
knit_with_parameters("C:/Users/alvak/OneDrive - Western Sydney University/Semester 3/Social Media Intelligence/Project Assignment 2022/SMI Project 2022.Rmd", encoding = "UTF-8")
unlink("C:/Users/alvak/OneDrive - Western Sydney University/Semester 3/Social Media Intelligence/Project Assignment 2022/SMI Project 2022_cache", recursive = TRUE)
# greatest and least neighborhood overlap
V(lcgraphed)[76, 117]
print(head(E(lcgraphed)))
em %>% filter_at(vars(user_id, reply_to_user_id), any_vars(. %in% c("44196397")))
em %>% filter_at(vars(user_id, reply_to_user_id), any_vars(. %in% c("44196397")))
hu = rep(1, length(names(V(bb))))
names(hu) = names(V(bb))
au = hu
M = as_adjacency_matrix(bb)
M = as.matrix(M)
## iterate K times
ik = 100
for (i in 1:ik) {
au = t(M) %*% hu
hu = M %*% au
}
au = au/sum(au)
hu = hu/sum(hu)
# eigenvalue solution
ed1 = eigen(M %*% t(M))
hub.ed = ed1$vectors[,1]
ed2 = eigen(t(M) %*% M)
au.ed = ed2$vectors[,1]
hub.ed = hub.ed/sum(hub.ed)
au.ed = au.ed/sum(au.ed)
# Result checking
au - au.ed
hu - hub.ed
P = M %*% diag(1/colSums(M))
nonodes = nrow(P)
R = matrix(1/nonodes, nonodes, nonodes)
ld = 0.8
S = ld*P + (1-ld)*R
colSums(S)
iter = rep(1/nonodes, nonodes)
for (k in 1:ik) {
iter = S %*% iter
}
e.val = eigen(S)
pr = e.val$vector[,1]/sum(e.val$vector[,1])
pr = Re(pr)
#checking method
iter - pr
# Ten highest page rank
pro = sort(pr, index.return=TRUE)
pro$ix[1:10]
prorder = pr[order(pr,decreasing=TRUE)]
prorder[1:10]
V(lcgraphed)[141, 142, 143, 1, 8, 9, 10, 11, 13, 16]
em %>% filter_at(vars(user_id, reply_to_user_id), any_vars(. %in% c("6182852", "128372940", "51827346", "1513921541918138372", "1316181534", "1021241294", "1450520650335072262", "1452304054206488576", "1510000127745970186", "1423355927302975489")))
